app.py:



from flask import Flask
from config import Config
from models import db
from routes import main as main_blueprint
from flask_wtf.csrf import CSRFProtect

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    # Initialize extensions
    db.init_app(app)
    CSRFProtect(app)

    # Create database tables if they don't exist
    with app.app_context():
        db.create_all()

    # Register blueprints
    app.register_blueprint(main_blueprint)

    return app

if __name__ == '__main__':
    app = create_app()
    app.run(debug=True)


config.py:



import os

basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'gunpla.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False


forms.py:



from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
from wtforms.validators import DataRequired

class GunplaForm(FlaskForm):
    name = StringField("Name", validators=[DataRequired()])
    series = StringField("Series", validators=[DataRequired()])
    grade = StringField("Grade", validators=[DataRequired()])
    scale = StringField("Scale")
    submit = SubmitField("Submit")


models.py:



from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Gunpla(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)
    series = db.Column(db.String(120), nullable=False)
    grade = db.Column(db.String(50), nullable=False)
    scale = db.Column(db.String(20), nullable=True)

    def __repr__(self):
        return f"<Gunpla {self.name}>"


routes.py:



from flask import Blueprint, render_template, redirect, url_for, flash, request
from models import Gunpla, db
from forms import GunplaForm

main = Blueprint('main', __name__)

@main.route('/')
def index():
    gunplas = Gunpla.query.all()
    return render_template('index.html', gunplas=gunplas)

@main.route('/create', methods=['GET', 'POST'])
def create():
    form = GunplaForm()
    if form.validate_on_submit():
        new_gunpla = Gunpla(
            name=form.name.data,
            series=form.series.data,
            grade=form.grade.data,
            scale=form.scale.data
        )
        db.session.add(new_gunpla)
        db.session.commit()
        flash('Gunpla model created successfully!', 'success')
        return redirect(url_for('main.index'))
    return render_template('create.html', form=form)

@main.route('/edit/<int:gunpla_id>', methods=['GET', 'POST'])
def edit(gunpla_id):
    gunpla = Gunpla.query.get_or_404(gunpla_id)
    form = GunplaForm(obj=gunpla)
    if form.validate_on_submit():
        gunpla.name = form.name.data
        gunpla.series = form.series.data
        gunpla.grade = form.grade.data
        gunpla.scale = form.scale.data
        db.session.commit()
        flash('Gunpla model updated successfully!', 'success')
        return redirect(url_for('main.index'))
    return render_template('edit.html', form=form, gunpla=gunpla)

@main.route('/delete/<int:gunpla_id>', methods=['POST'])
def delete(gunpla_id):
    gunpla = Gunpla.query.get_or_404(gunpla_id)
    db.session.delete(gunpla)
    db.session.commit()
    flash('Gunpla model deleted successfully!', 'success')
    return redirect(url_for('main.index'))


Write tests for this app using pytest and flask-testing