Directory structure:
└── flask-gunpla-monolith/
    ├── README.md
    ├── app.py
    ├── config.py
    ├── forms.py
    ├── models.py
    ├── routes.py
    ├── test.py
    ├── static/
    │   └── style.css
    └── templates/
        ├── base.html
        ├── create.html
        ├── edit.html
        └── index.html

================================================
File: app.py
================================================
from flask import Flask
from config import Config
from models import db
from routes import main as main_blueprint
from flask_wtf.csrf import CSRFProtect

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    # Initialize extensions
    db.init_app(app)
    CSRFProtect(app)

    # Create database tables if they don't exist
    with app.app_context():
        db.create_all()

    # Register blueprints
    app.register_blueprint(main_blueprint)

    return app

if __name__ == '__main__':
    app = create_app()
    app.run(debug=True)

================================================
File: config.py
================================================
import os

basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'gunpla.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False

================================================
File: forms.py
================================================
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
from wtforms.validators import DataRequired

class GunplaForm(FlaskForm):
    name = StringField("Name", validators=[DataRequired()])
    series = StringField("Series", validators=[DataRequired()])
    grade = StringField("Grade", validators=[DataRequired()])
    scale = StringField("Scale")
    submit = SubmitField("Submit")

================================================
File: models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Gunpla(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)
    series = db.Column(db.String(120), nullable=False)
    grade = db.Column(db.String(50), nullable=False)
    scale = db.Column(db.String(20), nullable=True)

    def __repr__(self):
        return f"<Gunpla {self.name}>"

================================================
File: routes.py
================================================
from flask import Blueprint, render_template, redirect, url_for, flash, request, abort
from models import Gunpla, db
from forms import GunplaForm

main = Blueprint('main', __name__)

@main.route('/')
def index():
    gunplas = Gunpla.query.all()
    return render_template('index.html', gunplas=gunplas)

@main.route('/create', methods=['GET', 'POST'])
def create():
    form = GunplaForm()
    if form.validate_on_submit():
        new_gunpla = Gunpla(
            name=form.name.data,
            series=form.series.data,
            grade=form.grade.data,
            scale=form.scale.data
        )
        db.session.add(new_gunpla)
        db.session.commit()
        flash('Gunpla model created successfully!', 'success')
        return redirect(url_for('main.index'))
    return render_template('create.html', form=form)

@main.route('/edit/<int:gunpla_id>', methods=['GET', 'POST'])
def edit(gunpla_id):
    # Use the new API with db.session.get()
    gunpla = db.session.get(Gunpla, gunpla_id)
    if gunpla is None:
        abort(404)
    form = GunplaForm(obj=gunpla)
    if form.validate_on_submit():
        gunpla.name = form.name.data
        gunpla.series = form.series.data
        gunpla.grade = form.grade.data
        gunpla.scale = form.scale.data
        db.session.commit()
        flash('Gunpla model updated successfully!', 'success')
        return redirect(url_for('main.index'))
    return render_template('edit.html', form=form, gunpla=gunpla)

@main.route('/delete/<int:gunpla_id>', methods=['POST'])
def delete(gunpla_id):
    # Use the new API with db.session.get()
    gunpla = db.session.get(Gunpla, gunpla_id)
    if gunpla is None:
        abort(404)
    db.session.delete(gunpla)
    db.session.commit()
    flash('Gunpla model deleted successfully!', 'success')
    return redirect(url_for('main.index'))

================================================
File: test.py
================================================
import unittest
from flask_testing import TestCase
from app import create_app
from models import db, Gunpla

class BaseTestCase(TestCase):
    """A base test case for flask-tracking the application."""

    def create_app(self):
        app = create_app()
        # Enable testing mode and disable CSRF for tests
        app.config.update(
            TESTING=True,
            WTF_CSRF_ENABLED=False,
            # Use in-memory SQLite database for tests
            SQLALCHEMY_DATABASE_URI='sqlite:///:memory:',
        )
        return app

    def setUp(self):
        """Set up test database before each test."""
        db.create_all()

    def tearDown(self):
        """Tear down test database after each test."""
        db.session.remove()
        db.drop_all()


class TestViews(BaseTestCase):
    def test_index_get(self):
        """Test that the index page loads correctly."""
        response = self.client.get('/')
        self.assertEqual(response.status_code, 200)
        # Verify that the index template is used (Flask-Testing feature)
        self.assert_template_used('index.html')

    def test_create_gunpla(self):
        """Test creating a new Gunpla model."""
        response = self.client.post(
            '/create',
            data={
                'name': "Test Gunpla",
                'series': "Test Series",
                'grade': "Master Grade",
                'scale': "1/100"
            },
            follow_redirects=True
        )
        self.assertEqual(response.status_code, 200)
        self.assertIn(b'Gunpla model created successfully!', response.data)

        # Check if the Gunpla entry exists in the database using Session.get()
        gunpla = db.session.get(Gunpla, 1)
        self.assertIsNotNone(gunpla)
        self.assertEqual(gunpla.name, "Test Gunpla")
        self.assertEqual(gunpla.series, "Test Series")
        self.assertEqual(gunpla.grade, "Master Grade")
        self.assertEqual(gunpla.scale, "1/100")

    def test_edit_gunpla(self):
        """Test editing an existing Gunpla model."""
        # Create a Gunpla instance first
        gunpla = Gunpla(name="Old Name", series="Old Series", grade="HG", scale="1/144")
        db.session.add(gunpla)
        db.session.commit()

        # Edit the gunpla
        response = self.client.post(
            f'/edit/{gunpla.id}',
            data={
                'name': "New Name",
                'series': "New Series",
                'grade': "MG",
                'scale': "1/100"
            },
            follow_redirects=True
        )
        self.assertEqual(response.status_code, 200)
        self.assertIn(b'Gunpla model updated successfully!', response.data)

        # Verify the changes in the database using Session.get()
        updated_gunpla = db.session.get(Gunpla, gunpla.id)
        self.assertEqual(updated_gunpla.name, "New Name")
        self.assertEqual(updated_gunpla.series, "New Series")
        self.assertEqual(updated_gunpla.grade, "MG")
        self.assertEqual(updated_gunpla.scale, "1/100")

    def test_delete_gunpla(self):
        """Test deleting a Gunpla model."""
        # Create a Gunpla instance first
        gunpla = Gunpla(name="Delete Model", series="Delete Series", grade="HG", scale="1/144")
        db.session.add(gunpla)
        db.session.commit()

        # Delete the gunpla using POST
        response = self.client.post(
            f'/delete/{gunpla.id}',
            follow_redirects=True
        )
        self.assertEqual(response.status_code, 200)
        self.assertIn(b'Gunpla model deleted successfully!', response.data)

        # Verify that the gunpla has been removed from the database using Session.get()
        deleted = db.session.get(Gunpla, gunpla.id)
        self.assertIsNone(deleted)


if __name__ == '__main__':
    unittest.main()

================================================
File: static/style.css
================================================
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
  }
  
  nav {
    background-color: #333;
    padding: 1rem;
  }
  
  nav a {
    color: #fff;
    margin-right: 1rem;
    text-decoration: none;
  }
  
  .container {
    padding: 1rem;
  }
  
  .alert {
    padding: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .alert-success {
    background-color: #d4edda;
    color: #155724;
  }
  
  .error {
    color: red;
    font-size: 0.9em;
  }

================================================
File: templates/base.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{% block title %}Gunpla Manager{% endblock %}</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
  <nav>
    <a href="{{ url_for('main.index') }}">Home</a>
    <a href="{{ url_for('main.create') }}">Add Gunpla</a>
  </nav>
  <div class="container">
    {% with messages = get_flashed_messages(with_categories=true) %}
      {% if messages %}
        {% for category, message in messages %}
          <div class="alert alert-{{ category }}">{{ message }}</div>
        {% endfor %}
      {% endif %}
    {% endwith %}
    {% block content %}{% endblock %}
  </div>
</body>
</html>

================================================
File: templates/create.html
================================================
{% extends "base.html" %}
{% block title %}Add Gunpla{% endblock %}
{% block content %}
  <h1>Add New Gunpla</h1>
  <form method="POST">
    {{ form.hidden_tag() }}
    <p>
      {{ form.name.label }}<br>
      {{ form.name(size=32) }}<br>
      {% for error in form.name.errors %}
        <span class="error">{{ error }}</span>
      {% endfor %}
    </p>
    <p>
      {{ form.series.label }}<br>
      {{ form.series(size=32) }}<br>
      {% for error in form.series.errors %}
        <span class="error">{{ error }}</span>
      {% endfor %}
    </p>
    <p>
      {{ form.grade.label }}<br>
      {{ form.grade(size=32) }}<br>
      {% for error in form.grade.errors %}
        <span class="error">{{ error }}</span>
      {% endfor %}
    </p>
    <p>
      {{ form.scale.label }}<br>
      {{ form.scale(size=32) }}
    </p>
    <p>{{ form.submit() }}</p>
  </form>
{% endblock %}

================================================
File: templates/edit.html
================================================
{% extends "base.html" %}
{% block title %}Edit Gunpla{% endblock %}
{% block content %}
  <h1>Edit Gunpla</h1>
  <form method="POST">
    {{ form.hidden_tag() }}
    <p>
      {{ form.name.label }}<br>
      {{ form.name(size=32) }}<br>
      {% for error in form.name.errors %}
        <span class="error">{{ error }}</span>
      {% endfor %}
    </p>
    <p>
      {{ form.series.label }}<br>
      {{ form.series(size=32) }}<br>
      {% for error in form.series.errors %}
        <span class="error">{{ error }}</span>
      {% endfor %}
    </p>
    <p>
      {{ form.grade.label }}<br>
      {{ form.grade(size=32) }}<br>
      {% for error in form.grade.errors %}
        <span class="error">{{ error }}</span>
      {% endfor %}
    </p>
    <p>
      {{ form.scale.label }}<br>
      {{ form.scale(size=32) }}
    </p>
    <p>{{ form.submit() }}</p>
  </form>
{% endblock %}

================================================
File: templates/index.html
================================================
{% extends "base.html" %}
{% block title %}Gunpla List{% endblock %}
{% block content %}
  <h1>Gunpla Models</h1>
  {% if gunplas %}
    <ul>
      {% for gunpla in gunplas %}
        <li>
          <strong>{{ gunpla.name }}</strong> - {{ gunpla.series }} - {{ gunpla.grade }} - {{ gunpla.scale }}
          <a href="{{ url_for('main.edit', gunpla_id=gunpla.id) }}">Edit</a>
          <form action="{{ url_for('main.delete', gunpla_id=gunpla.id) }}" method="post" style="display:inline;">
            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
            <input type="submit" value="Delete" onclick="return confirm('Are you sure you want to delete this model?');">
          </form>
        </li>
      {% endfor %}
    </ul>
  {% else %}
    <p>No gunpla models found.</p>
  {% endif %}
{% endblock %}

Modify the menu such that edit and delete use HTMX instead of SSR.
HTMX should be implemented with Flask-WTF like this:

    <form method="POST">
        {{ form.csrf_token }}
        {{ form.country(**{"hx-get": "/get_cities", "hx-target": "#city"}) }}
        {{ form.city }}
        <button>Submit</button>
    </form>